language: cpp
git:
  depth: 3
  quiet: true

branches:
  except:
    - # Do not build tags that we create when we upload to GitHub Releases
    - /^(?i:continuous)$/
    - /^(?i:continuous-linux)$/
    - /^(?i:continuous-osx)$/
    - /^(?i:continuous-windows-appveyor)$/
    - /^(?i:continuous-windows-travis)$/
    - /^(?i:continuous).*$/
    - appveyor-builds
  only:
    - travis-builds

matrix:
  include:
    - os: linux
      dist: xenial
      compiler: g++
      sudo: required
      cache:
        ccache: false
        timeout: 1000
        directories:
          - /c/workaround

      before_install:
        - START_TIMESTAMP=$(date +%s)
        - MAX_TIME=50
        - sudo mkdir -p /c
        - cd /c
        - if [ -f workaround/deps-install.tar ]; then travis_wait tar xf workaround/deps-install.tar; fi;
        - if [ -f workaround/deps-build.tar ]; then travis_wait tar xf workaround/deps-build.tar; fi;
        #- rm -fr /c/deps-build/ext_bison/ext_bison-prefix/src/ext_bison/*
        - |
          CACHE_UNCOMPRESS_TIME=$(( ( $(date +%s) - $START_TIMESTAMP ) / 60 ))
          CACHE_COMPRESS_TIME=$(( ( $CACHE_UNCOMPRESS_TIME * 15 ) / 10 ))
          if [ $CACHE_COMPRESS_TIME -eq 0 ]; then CACHE_COMPRESS_TIME=5; fi;
          SAFETY_TIME=5
          CUTOFF_TIME=$(( $MAX_TIME - $CACHE_COMPRESS_TIME - $SAFETY_TIME ))
          if [ ! -f "/c/workaround/deps-install.tar" ]; then CUTOFF_TIME=43; fi;
          echo "CACHE_UNCOMPRESS_TIME ${CACHE_UNCOMPRESS_TIME}"
          echo "CACHE_COMPRESS_TIME ${CACHE_COMPRESS_TIME}"
          echo "CUTOFF_TIME ${CUTOFF_TIME}"

        - |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
          sudo apt-get update -qq
          # libharfbuzz-dev isn't detected by Qt, so don't install it
          sudo apt-get install -qq -y g++-6 cmake ninja-build wget zlib1g-dev pkg-config libxext-dev libx11-dev libx11-xcb-dev libxcb1-dev libxcb-glx0-dev libxkbcommon-x11-dev libxkbcommon-dev libgl1-mesa-dev libfreetype6-dev libxml-parser-perl libfam-dev libxcb-keysyms1-dev libudev-dev libxrender-dev gperf flex bison python3-pip > /dev/null
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-6 10
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-6 10

      install:
        - CONTINUE_WITH_NEXT_STEP=true
        - |
            REMAINING_TIME=$(( $CUTOFF_TIME - ( $(date +%s) - $START_TIMESTAMP ) / 60 ))
            if [ ${REMAINING_TIME} -gt 0 ] && [ ${CONTINUE_WITH_NEXT_STEP} -eq true ]; then
              timeout ${REMAINING_TIME}m $TRAVIS_BUILD_DIR/packaging/linux/appimage/build.sh deps /c $TRAVIS_BUILD_DIR || CONTINUE_WITH_NEXT_STEP=false
            fi

      script:
        - |
            REMAINING_TIME=$(( $CUTOFF_TIME - ( $(date +%s) - $START_TIMESTAMP ) / 60 ))
            if [ ${REMAINING_TIME} -gt 0 ] && [ ${CONTINUE_WITH_NEXT_STEP} -eq true ]; then
              timeout ${REMAINING_TIME}m $TRAVIS_BUILD_DIR/packaging/linux/appimage/build.sh kmymoney /c $TRAVIS_BUILD_DIR || CONTINUE_WITH_NEXT_STEP=false
            fi

        - |
            REMAINING_TIME=$(( $CUTOFF_TIME - ( $(date +%s) - $START_TIMESTAMP ) / 60 ))
            if [ ${REMAINING_TIME} -gt 0 ] && [ ${CONTINUE_WITH_NEXT_STEP} -eq true ]; then
              timeout ${REMAINING_TIME}m $TRAVIS_BUILD_DIR/packaging/linux/appimage/build.sh image /c $TRAVIS_BUILD_DIR || CONTINUE_WITH_NEXT_STEP=false
            fi

      after_success:
        - |
          REMAINING_TIME=$(( $CUTOFF_TIME - ( $(date +%s) - $START_TIMESTAMP ) / 60 ))
          if [ ${REMAINING_TIME} -gt 0 ] && [ ${CONTINUE_WITH_NEXT_STEP} -eq true ]; then
            cd /c/downloads
            wget -c https://github.com/probonopd/uploadtool/raw/master/upload.sh
            export UPLOADTOOL_SUFFIX="linux"
            bash upload.sh /c/image-build/*.AppImage*
          fi

      before_cache:
        - find /c/deps-install \( -type f \( -name "*.so" -o -executable \) \) -exec strip {} \+
        - cd /c
        - |
            travis_wait tar cf workaround/deps-install.tar deps-install
            echo "Cache size (uncompressed) $(du -h workaround/deps-install.tar | cut -f1)"
        - |
            travis_wait tar cf workaround/deps-build.tar deps-build
            echo "Cache size (uncompressed) $(du -h workaround/deps-build.tar | cut -f1)"

    - os: osx
      osx_image: xcode9.4
      compiler: clang
      sudo: required
      cache:
        timeout: 1000
        directories:
          - /c/workaround

      before_install:
        - START_TIMESTAMP=$(date +%s)
        - MAX_TIME=50
        - sudo mkdir -p /c
        - cd /c
        - if [ -f workaround/deps-install.tar ]; then travis_wait tar xf workaround/deps-install.tar; fi;
        - if [ -f workaround/deps-build.tar ]; then travis_wait tar xf workaround/deps-build.tar; fi;
        #- rm -fr /c/deps-build/ext_bison/ext_bison-prefix/src/ext_bison/*
        - |
          CACHE_UNCOMPRESS_TIME=$(( ( $(date +%s) - $START_TIMESTAMP ) / 60 ))
          CACHE_COMPRESS_TIME=$(( ( $CACHE_UNCOMPRESS_TIME * 15 ) / 10 ))
          if [ $CACHE_COMPRESS_TIME -eq 0 ]; then CACHE_COMPRESS_TIME=5; fi;
          SAFETY_TIME=5
          CUTOFF_TIME=$(( $MAX_TIME - $CACHE_COMPRESS_TIME - $SAFETY_TIME ))
          if [ ! -f "/c/workaround/deps-install.tar" ]; then CUTOFF_TIME=43; fi;
          echo "CACHE_UNCOMPRESS_TIME ${CACHE_UNCOMPRESS_TIME}"
          echo "CACHE_COMPRESS_TIME ${CACHE_COMPRESS_TIME}"
          echo "CUTOFF_TIME ${CUTOFF_TIME}"

      install:
        - CONTINUE_WITH_NEXT_STEP=true
        - |
            REMAINING_TIME=$(( $CUTOFF_TIME - ( $(date +%s) - $START_TIMESTAMP ) / 60 ))
            if [ ${REMAINING_TIME} -gt 0 ] && [ ${CONTINUE_WITH_NEXT_STEP} -eq true ]; then
              gtimeout ${REMAINING_TIME}m $TRAVIS_BUILD_DIR/packaging/osx/dmgimage/build.sh deps /c $TRAVIS_BUILD_DIR || CONTINUE_WITH_NEXT_STEP=false
            fi

      script:
        - |
            REMAINING_TIME=$(( $CUTOFF_TIME - ( $(date +%s) - $START_TIMESTAMP ) / 60 ))
            if [ ${REMAINING_TIME} -gt 0 ] && [ ${CONTINUE_WITH_NEXT_STEP} -eq true ]; then
              gtimeout ${REMAINING_TIME}m $TRAVIS_BUILD_DIR/packaging/osx/dmgimage/build.sh kmymoney /c $TRAVIS_BUILD_DIR || CONTINUE_WITH_NEXT_STEP=false
            fi
        - |
            REMAINING_TIME=$(( $CUTOFF_TIME - ( $(date +%s) - $START_TIMESTAMP ) / 60 ))
            if [ ${REMAINING_TIME} -gt 0 ] && [ ${CONTINUE_WITH_NEXT_STEP} -eq true ]; then
              gtimeout ${REMAINING_TIME}m $TRAVIS_BUILD_DIR/packaging/osx/dmgimage/build.sh image /c $TRAVIS_BUILD_DIR || CONTINUE_WITH_NEXT_STEP=false
            fi

      after_success:
        - |
          REMAINING_TIME=$(( $CUTOFF_TIME - ( $(date +%s) - $START_TIMESTAMP ) / 60 ))
          if [ ${REMAINING_TIME} -gt 0 ] && [ ${CONTINUE_WITH_NEXT_STEP} -eq true ]; then
            cd /c/downloads
            wget -c https://github.com/probonopd/uploadtool/raw/master/upload.sh
            export UPLOADTOOL_SUFFIX="osx"
            bash upload.sh /c/image-build/*.dmg*
          fi

      before_cache:
        - find /c/deps-install \( -type f \( -name "*.dylib" -o -name "*.so" -o -executable \) \) -exec strip {} \+
        - cd /c
        - |
            travis_wait tar cf workaround/deps-install.tar deps-install
            echo "Cache size (uncompressed) $(du -h workaround/deps-install.tar | cut -f1)"
        - |
            travis_wait tar cf workaround/deps-build.tar deps-build
            echo "Cache size (uncompressed) $(du -h workaround/deps-build.tar | cut -f1)"

    - os: windows
      filter_secrets: false
      cache:
        timeout: 2000
        directories:
          - /c/workaround

      before_install:
        - START_TIMESTAMP=$(date +%s)
        - MAX_TIME=50
        - cd /c
        - if [ -f workaround/deps-install.tar ]; then travis_wait tar xf workaround/deps-install.tar; fi;
        - if [ -f workaround/deps-build.tar ]; then travis_wait tar xf workaround/deps-build.tar; fi;
        #- rm -fr /c/deps-build/ext_bison/ext_bison-prefix/src/ext_bison/*
        - |
          CACHE_UNCOMPRESS_TIME=$(( ( $(date +%s) - $START_TIMESTAMP ) / 60 ))
          CACHE_COMPRESS_TIME=$(( ( $CACHE_UNCOMPRESS_TIME * 15 ) / 10 ))
          if [ $CACHE_COMPRESS_TIME -eq 0 ]; then CACHE_COMPRESS_TIME=5; fi;
          SAFETY_TIME=5
          CUTOFF_TIME=$(( $MAX_TIME - $CACHE_COMPRESS_TIME - $SAFETY_TIME ))
          if [ ! -f "/c/deps-install/bin/libiconv-2.dll" ]; then CUTOFF_TIME=43; fi;
          echo "CACHE_UNCOMPRESS_TIME ${CACHE_UNCOMPRESS_TIME}"
          echo "CACHE_COMPRESS_TIME ${CACHE_COMPRESS_TIME}"
          echo "CUTOFF_TIME ${CUTOFF_TIME}"

      install: false

      script:
        - |
          REMAINING_TIME=$(( $CUTOFF_TIME - ( $(date +%s) - $START_TIMESTAMP ) / 60 ))
          if [ ${REMAINING_TIME} -gt 0 ]; then
            powershell -ExecutionPolicy Bypass -File $TRAVIS_BUILD_DIR/packaging/windows/exe/build-from-ci.ps1 ${REMAINING_TIME} /c $TRAVIS_BUILD_DIR
          fi

      before_cache:
        - find /c/deps-install \( -type f \( -name "*.dll" -o -name "*.exe" \) \) -exec strip {} \+
        - cd /c
        - |
            travis_wait tar cf workaround/deps-install.tar deps-install
            echo "Cache size (uncompressed) $(du -h workaround/deps-install.tar | cut -f1)"
        - |
            travis_wait tar cf workaround/deps-build.tar deps-build
            echo "Cache size (uncompressed) $(du -h workaround/deps-build.tar | cut -f1)"
