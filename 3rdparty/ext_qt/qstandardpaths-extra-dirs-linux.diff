diff -ruN qtbase-everywhere-src-5.12.3.orig/configure.json qtbase-everywhere-src-5.12.3/configure.json
--- qtbase-everywhere-src-5.12.3.orig/configure.json	2019-04-09 11:51:26.000000000 +0200
+++ qtbase-everywhere-src-5.12.3/configure.json	2019-05-22 21:06:41.376279474 +0200
@@ -90,6 +90,7 @@
             "incredibuild-xge": { "type": "boolean", "name": "incredibuild_xge" },
             "libudev": "boolean",
             "ltcg": "boolean",
+            "linux-additional-datadirs": { "type": "string", "name": "linux_additional_datadirs" },
             "make": { "type": "addString", "values": [ "examples", "libs", "tests", "tools" ] },
             "make-tool": "string",
             "mips_dsp": "boolean",
diff -ruN qtbase-everywhere-src-5.12.3.orig/configure.pri qtbase-everywhere-src-5.12.3/configure.pri
--- qtbase-everywhere-src-5.12.3.orig/configure.pri	2019-04-09 11:51:26.000000000 +0200
+++ qtbase-everywhere-src-5.12.3/configure.pri	2019-05-23 18:41:31.213380508 +0200
@@ -1209,6 +1209,15 @@
     !isEmpty(config.input.qt_libinfix): \
         output += "$${LITERAL_HASH}define QT_LIBINFIX \"$$eval(config.input.qt_libinfix)\""
 
+    # Add support for additional QStandardPaths::GenericDataLocation on Linux
+    unix {
+        !isEmpty(config.input.linux_additional_datadirs) {
+            output += "$${LITERAL_HASH}define QT_LINUX_ADDITIONAL_DATADIRS \"$$eval(config.input.linux_additional_datadirs)\""
+        } else {
+            output += "// $${LITERAL_HASH}undef QT_LINUX_ADDITIONAL_DATADIRS"
+        }
+    }
+
     return($$output)
 }
 
diff -ruN qtbase-everywhere-src-5.12.3.orig/src/corelib/io/qstandardpaths_unix.cpp qtbase-everywhere-src-5.12.3/src/corelib/io/qstandardpaths_unix.cpp
--- qtbase-everywhere-src-5.12.3.orig/src/corelib/io/qstandardpaths_unix.cpp	2019-04-09 11:51:26.000000000 +0200
+++ qtbase-everywhere-src-5.12.3/src/corelib/io/qstandardpaths_unix.cpp	2019-05-23 18:30:50.058470907 +0200
@@ -350,6 +350,28 @@
     default:
         break;
     }
+
+#if !defined(QT_BOOTSTRAPPED) && defined(Q_OS_LINUX)
+    if (type == AppDataLocation || type == AppLocalDataLocation || type == GenericDataLocation) {
+        QStringList extraDataDirs;
+#ifdef QT_LINUX_ADDITIONAL_DATADIRS
+        QString fromConfigure = QStringLiteral(QT_LINUX_ADDITIONAL_DATADIRS);
+        extraDataDirs = fromConfigure.split(QLatin1Char(':'), QString::SkipEmptyParts);
+#endif
+        // Also allow the environment variable QT_DATA_DIRS to override this default
+        QByteArray qtDataDirsEnv = qgetenv("QT_DATA_DIRS");
+        if (!qtDataDirsEnv.isEmpty()) {
+            extraDataDirs = QFile::decodeName(qtDataDirsEnv).split(QLatin1Char(':'), QString::SkipEmptyParts);
+        }
+        if (type == AppDataLocation || type == AppLocalDataLocation) {
+            for (QString &dir : extraDataDirs) {
+                appendOrganizationAndApp(dir);
+            }
+        }
+        dirs.prepend(extraDataDirs);
+    }
+#endif
+
     const QString localDir = writableLocation(type);
     dirs.prepend(localDir);
     return dirs;
