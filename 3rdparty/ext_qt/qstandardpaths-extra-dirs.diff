diff -ruN qt-everywhere-src-5.12.2.orig/qtbase/configure.json qt-everywhere-src-5.12.2/qtbase/configure.json
--- qt-everywhere-src-5.12.2.orig/qtbase/configure.json	2019-03-06 08:59:50.000000000 +0100
+++ qt-everywhere-src-5.12.2/qtbase/configure.json	2019-03-25 18:41:25.560240319 +0100
@@ -90,6 +90,7 @@
             "incredibuild-xge": { "type": "boolean", "name": "incredibuild_xge" },
             "libudev": "boolean",
             "ltcg": "boolean",
+            "macos-additional-datadirs": { "type": "string", "name": "macos_additional_datadirs" },
             "make": { "type": "addString", "values": [ "examples", "libs", "tests", "tools" ] },
             "make-tool": "string",
             "mips_dsp": "boolean",
diff -ruN qt-everywhere-src-5.12.2.orig/qtbase/configure.pri qt-everywhere-src-5.12.2/qtbase/configure.pri
--- qt-everywhere-src-5.12.2.orig/qtbase/configure.pri	2019-03-06 08:59:50.000000000 +0100
+++ qt-everywhere-src-5.12.2/qtbase/configure.pri	2019-03-25 18:41:25.560240319 +0100
@@ -1206,6 +1206,15 @@
     !isEmpty(config.input.qt_libinfix): \
         output += "$${LITERAL_HASH}define QT_LIBINFIX \"$$eval(config.input.qt_libinfix)\""
 
+    # Add support for additional QStandardPaths::GenericDataLocation on MacOS (useful for homebrew, etc.)
+    macos {
+        !isEmpty(config.input.macos_additional_datadirs) {
+            output += "$${LITERAL_HASH}define QT_MACOS_ADDITIONAL_DATADIRS \"$$eval(config.input.macos_additional_datadirs)\""
+        } else {
+            output += "// $${LITERAL_HASH}undef QT_MACOS_ADDITIONAL_DATADIRS"
+        }
+    }
+
     return($$output)
 }
 
diff -ruN qt-everywhere-src-5.12.2.orig/qtbase/src/corelib/io/qstandardpaths_mac.mm qt-everywhere-src-5.12.2/qtbase/src/corelib/io/qstandardpaths_mac.mm
--- qt-everywhere-src-5.12.2.orig/qtbase/src/corelib/io/qstandardpaths_mac.mm	2019-03-06 08:59:50.000000000 +0100
+++ qt-everywhere-src-5.12.2/qtbase/src/corelib/io/qstandardpaths_mac.mm	2019-03-25 18:41:25.561240296 +0100
@@ -184,6 +184,31 @@
         dirs << writableLocation(PicturesLocation) << QLatin1String("assets-library://");
 #endif
 
+#if !defined(QT_BOOTSTRAPPED) && defined(Q_OS_MACOS)
+    if (type == AppDataLocation || type == AppLocalDataLocation || type == GenericDataLocation) {
+        QStringList extraDataDirs;
+        // Add the value of -macos-generic-datadirs configure argument to the list.
+        // This allows e.g. homebrew to use a Qt build that is configured to search
+        // for generic data in /usr/local/share instead of requiring it to be in
+        // /Library/Application Support which is not writable from the homebrew sandbox.
+#ifdef QT_MACOS_ADDITIONAL_DATADIRS
+        QString fromConfigure = QStringLiteral(QT_MACOS_ADDITIONAL_DATADIRS);
+        extraDataDirs = fromConfigure.split(QLatin1Char(':'), QString::SkipEmptyParts);
+#endif
+        // Also allow the environment variable QT_DATA_DIRS to override this default
+        QByteArray qtDataDirsEnv = qgetenv("QT_DATA_DIRS");
+        if (!qtDataDirsEnv.isEmpty()) {
+            extraDataDirs = QFile::decodeName(qtDataDirsEnv).split(QLatin1Char(':'), QString::SkipEmptyParts);
+        }
+        if (type == AppDataLocation || type == AppLocalDataLocation) {
+            for (QString &dir : extraDataDirs) {
+                appendOrganizationAndApp(dir);
+            }
+        }
+        dirs << extraDataDirs;
+    }
+#endif
+
     if (type == GenericDataLocation || type == FontsLocation || type == ApplicationsLocation
             || type == AppDataLocation || type == AppLocalDataLocation
             || type == GenericCacheLocation || type == CacheLocation) {
